"use strict";
/**
 * Provides regular expression matching.
 *
 * Adapted from https://hackage.haskell.org/package/regex-compat-0.95.1/docs/Text-Regex.html
 *
 * @since 0.1.8
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.split = exports.sub = exports.test = exports.match = void 0;
var O = __importStar(require("fp-ts/lib/Option"));
/**
 * Returns the list of subexpression matches, or `None` if the match fails.
 *
 * @example
 * import * as O from 'fp-ts/Option'
 * import { match } from 'fp-ts-contrib/RegExp'
 * import { pipe } from 'fp-ts/function'
 *
 * const myMatch = match(/^(\d)(\w)$/)
 * assert.deepStrictEqual(pipe('2e', myMatch, O.map(Array.from)), O.some(['2e', '2', 'e']))
 * assert.deepStrictEqual(myMatch('foo'), O.none)
 *
 * @since 0.1.8
 */
var match = function (r) { return function (s) { return O.fromNullable(s.match(r)); }; };
exports.match = match;
/**
 * Returns `true` if the string matches the regular expression,
 * otherwise `false`.
 *
 * @example
 * import { test } from 'fp-ts-contrib/RegExp'
 *
 * const myTest = test(/^(\d)(\w)$/)
 * assert.strictEqual(myTest('6s'), true)
 * assert.strictEqual(myTest('bar'), false)
 *
 * @since 0.1.8
 */
var test = function (r) { return function (s) {
    var lastIndex = r.lastIndex;
    var res = r.test(s);
    r.lastIndex = lastIndex;
    return res;
}; };
exports.test = test;
/**
 * Replaces every occurance of the given regular expression
 * with the replacement string.
 *
 * @example
 * import { sub } from 'fp-ts-contrib/RegExp'
 *
 * const sanitiseSpaces = sub(/\s/g, '_')
 * assert.strictEqual(sanitiseSpaces('foo bar owl'), 'foo_bar_owl')
 *
 * @since 0.1.8
 */
var sub = function (r, replacement) { return function (s) {
    return s.replace(r, replacement);
}; };
exports.sub = sub;
/**
 * Splits a string based on a regular expression. The regular expression
 * should identify one delimiter.
 *
 * @example
 * import { split } from 'fp-ts-contrib/RegExp'
 *
 * const splitByHash = split(/#/)
 * assert.deepStrictEqual(splitByHash('foo#bar#beer'), ['foo', 'bar', 'beer'])
 * assert.deepStrictEqual(splitByHash('noHashes'), ['noHashes'])
 *
 * @since 0.1.8
 */
var split = function (r) { return function (s) { return s.split(r); }; };
exports.split = split;
