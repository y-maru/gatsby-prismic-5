"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zipper = exports.Comonad = exports.Traversable = exports.Foldable = exports.Apply = exports.Applicative = exports.FunctorWithIndex = exports.Functor = exports.getMonoid = exports.getSemigroup = exports.getShow = exports.URI = exports.extract = exports.sequence = exports.reduceRight = exports.reduce = exports.foldMap = exports.duplicate = exports.extend = exports.of = exports.apSecond = exports.apFirst = exports.ap = exports.mapWithIndex = exports.map = exports.deleteRight = exports.deleteLeft = exports.insertRight = exports.insertLeft = exports.end = exports.start = exports.down = exports.up = exports.moveByFindFirst = exports.findIndex = exports.move = exports.modify = exports.update = exports.toArray = exports.toReadonlyNonEmptyArray = exports.toNonEmptyArray = exports.length = exports.isOutOfBound = exports.fromNonEmptyArray = exports.fromReadonlyNonEmptyArray = exports.fromArray = exports.fromReadonlyArray = exports.make = void 0;
var A = __importStar(require("fp-ts/lib/Array"));
var function_1 = require("fp-ts/lib/function");
var NEA = __importStar(require("fp-ts/lib/NonEmptyArray"));
var O = __importStar(require("fp-ts/lib/Option"));
var pipeable_1 = require("fp-ts/lib/pipeable");
var RA = __importStar(require("fp-ts/lib/ReadonlyArray"));
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * Creates a new zipper.
 *
 * @category constructors
 * @since 0.1.6
 */
var make = function (lefts, focus, rights) { return ({
    lefts: lefts.slice(),
    focus: focus,
    rights: rights.slice()
}); };
exports.make = make;
/**
 * @category constructors
 * @since 0.1.23
 */
var fromReadonlyArray = function (as, focusIndex) {
    if (focusIndex === void 0) { focusIndex = 0; }
    if (RA.isEmpty(as) || RA.isOutOfBound(focusIndex, as)) {
        return O.none;
    }
    else {
        return O.some((0, exports.make)((0, pipeable_1.pipe)(as.slice(), A.takeLeft(focusIndex)), as[focusIndex], (0, pipeable_1.pipe)(as.slice(), A.dropLeft(focusIndex + 1))));
    }
};
exports.fromReadonlyArray = fromReadonlyArray;
/**
 * @category constructors
 * @since 0.1.6
 */
exports.fromArray = exports.fromReadonlyArray;
/**
 * @category constructors
 * @since 0.1.23
 */
var fromReadonlyNonEmptyArray = function (nea) {
    return (0, exports.make)([], nea[0], nea.slice(1));
};
exports.fromReadonlyNonEmptyArray = fromReadonlyNonEmptyArray;
/**
 * @category constructors
 * @since 0.1.6
 */
exports.fromNonEmptyArray = exports.fromReadonlyNonEmptyArray;
// -------------------------------------------------------------------------------------
// destructors
// -------------------------------------------------------------------------------------
/**
 * @category destructors
 * @since 0.1.18
 */
var isOutOfBound = function (index, fa) {
    return index < 0 || index >= (0, exports.length)(fa);
};
exports.isOutOfBound = isOutOfBound;
/**
 * @category destructors
 * @since 0.1.6
 */
var length = function (fa) { return fa.lefts.length + 1 + fa.rights.length; };
exports.length = length;
/**
 * @category destructors
 * @since 0.1.23
 */
var toNonEmptyArray = function (fa) {
    return (0, pipeable_1.pipe)(NEA.of(fa.focus), function (as) { return NEA.concat(fa.lefts, as); }, function (as) { return NEA.concat(as, fa.rights); });
};
exports.toNonEmptyArray = toNonEmptyArray;
/**
 * @category destructors
 * @since 0.1.23
 */
exports.toReadonlyNonEmptyArray = exports.toNonEmptyArray;
/**
 * @category destructors
 * @since 0.1.6
 * @deprecated Use the new {@link toNonEmptyArray} destructor instead.
 */
exports.toArray = exports.toNonEmptyArray;
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * Updates the focus of the zipper.
 *
 * @category combinators
 * @since 0.1.6
 */
var update = function (a) { return function (fa) { return (0, exports.make)(fa.lefts, a, fa.rights); }; };
exports.update = update;
/**
 * Applies `f` to the focus and update with the result.
 *
 * @category combinators
 * @since 0.1.6
 */
var modify = function (f) { return function (fa) { return (0, pipeable_1.pipe)(fa, (0, exports.update)(f(fa.focus))); }; };
exports.modify = modify;
/**
 * Moves focus in the zipper, or `None` if there is no such element.
 *
 * @category combinators
 * @since 0.1.6
 */
var move = function (f, fa) {
    var newIndex = f(fa.lefts.length);
    if ((0, exports.isOutOfBound)(newIndex, fa)) {
        return O.none;
    }
    else {
        return (0, exports.fromArray)((0, exports.toNonEmptyArray)(fa), newIndex);
    }
};
exports.move = move;
/**
 * Find the first index for which a predicate holds.
 *
 * @category utils
 * @since 0.1.24
 */
var findIndex = function (predicate) { return function (fa) {
    return (0, pipeable_1.pipe)(fa.lefts, RA.findIndex(predicate), O.alt(function () { return (predicate(fa.focus) ? O.some(fa.lefts.length) : O.none); }), O.alt(function () {
        return (0, pipeable_1.pipe)(fa.rights, RA.findIndex(predicate), O.map(function (i) { return fa.lefts.length + 1 + i; }));
    }));
}; };
exports.findIndex = findIndex;
/**
 * Use a function to find and focus the first matching element in the array. If
 * no element matches, `None` is returned. If an element matches,
 * `Some<Zipper<A>>` is returned.
 *
 * @category combinators
 * @since 0.1.26
 */
var moveByFindFirst = function (predicate) { return function (fa) {
    return (0, pipeable_1.pipe)(fa, (0, exports.findIndex)(predicate), O.chain(function (i) { return (i === fa.lefts.length ? O.some(fa) : (0, exports.move)(function () { return i; }, fa)); }));
}; };
exports.moveByFindFirst = moveByFindFirst;
/**
 * Moves focus of the zipper up.
 *
 * @category combinators
 * @since 0.1.6
 */
var up = function (fa) { return (0, exports.move)(function_1.decrement, fa); };
exports.up = up;
/**
 * Moves focus of the zipper down.
 *
 * @category combinators
 * @since 0.1.6
 */
var down = function (fa) { return (0, exports.move)(function_1.increment, fa); };
exports.down = down;
/**
 * Moves focus to the start of the zipper.
 *
 * @category combinators
 * @since 0.1.6
 */
var start = function (fa) {
    if (A.isEmpty(fa.lefts)) {
        return fa;
    }
    else {
        return (0, exports.make)([], fa.lefts[0], A.snoc((0, pipeable_1.pipe)(fa.lefts, A.dropLeft(1)), fa.focus).concat(fa.rights));
    }
};
exports.start = start;
/**
 * Moves focus to the end of the zipper.
 *
 * @category combinators
 * @since 0.1.6
 */
var end = function (fa) {
    var len = fa.rights.length;
    if (len === 0) {
        return fa;
    }
    else {
        return (0, exports.make)(A.snoc(fa.lefts, fa.focus).concat((0, pipeable_1.pipe)(fa.rights, A.takeLeft(len - 1))), fa.rights[len - 1], []);
    }
};
exports.end = end;
/**
 * Inserts an element to the left of the focus and focuses on the new element.
 *
 * @category combinators
 * @since 0.1.6
 */
var insertLeft = function (a) { return function (fa) {
    return (0, exports.make)(fa.lefts, a, A.cons(fa.focus, fa.rights));
}; };
exports.insertLeft = insertLeft;
/**
 * Inserts an element to the right of the focus and focuses on the new element.
 *
 * @category combinators
 * @since 0.1.6
 */
var insertRight = function (a) { return function (fa) {
    return (0, exports.make)(A.snoc(fa.lefts, fa.focus), a, fa.rights);
}; };
exports.insertRight = insertRight;
/**
 * Deletes the element at focus and moves the focus to the left. If there is no element on the left,
 * the focus is moved to the right.
 *
 * @category combinators
 * @since 0.1.6
 */
var deleteLeft = function (fa) {
    var len = fa.lefts.length;
    return (0, exports.fromArray)(fa.lefts.concat(fa.rights), len > 0 ? len - 1 : 0);
};
exports.deleteLeft = deleteLeft;
/**
 * Deletes the element at focus and moves the focus to the right. If there is no element on the right,
 * the focus is moved to the left.
 *
 * @category combinators
 * @since 0.1.6
 */
var deleteRight = function (fa) {
    var lenl = fa.lefts.length;
    var lenr = fa.rights.length;
    return (0, exports.fromArray)(fa.lefts.concat(fa.rights), lenr > 0 ? lenl : lenl - 1);
};
exports.deleteRight = deleteRight;
// -------------------------------------------------------------------------------------
// non-pipeables
// -------------------------------------------------------------------------------------
var map_ = function (fa, f) { return (0, exports.make)(fa.lefts.map(f), f(fa.focus), fa.rights.map(f)); };
var mapWithIndex_ = function (fa, f) {
    var l = fa.lefts.length;
    return (0, exports.make)(fa.lefts.map(function (a, i) { return f(i, a); }), f(l, fa.focus), fa.rights.map(function (a, i) { return f(l + 1 + i, a); }));
};
var ap_ = function (fab, fa) {
    return (0, exports.make)(A.array.ap(fab.lefts, fa.lefts), fab.focus(fa.focus), A.array.ap(fab.rights, fa.rights));
};
var extend_ = function (fa, f) {
    var lefts = fa.lefts.map(function (a, i) {
        return f((0, exports.make)((0, pipeable_1.pipe)(fa.lefts, A.takeLeft(i)), a, A.snoc((0, pipeable_1.pipe)(fa.lefts, A.dropLeft(i + 1)), fa.focus).concat(fa.rights)));
    });
    var rights = fa.rights.map(function (a, i) {
        return f((0, exports.make)(A.snoc(fa.lefts, fa.focus).concat((0, pipeable_1.pipe)(fa.rights, A.takeLeft(i))), a, (0, pipeable_1.pipe)(fa.rights, A.dropLeft(i + 1))));
    });
    return (0, exports.make)(lefts, f(fa), rights);
};
var reduce_ = function (fa, b, f) { return fa.rights.reduce(f, f(fa.lefts.reduce(f, b), fa.focus)); };
var reduceRight_ = function (fa, b, f) {
    var rights = fa.rights.reduceRight(function (acc, a) { return f(a, acc); }, b);
    var focus = f(fa.focus, rights);
    return fa.lefts.reduceRight(function (acc, a) { return f(a, acc); }, focus);
};
var foldMap_ = function (M) { return function (fa, f) {
    var lefts = fa.lefts.reduce(function (acc, a) { return M.concat(acc, f(a)); }, M.empty);
    var rights = fa.rights.reduce(function (acc, a) { return M.concat(acc, f(a)); }, M.empty);
    return M.concat(M.concat(lefts, f(fa.focus)), rights);
}; };
// TODO: add pipeable traverse fp-ts version >= 2.6.3
var traverse_ = function (F) {
    var traverseF = A.array.traverse(F);
    return function (ta, f) {
        return F.ap(F.ap(F.map(traverseF(ta.lefts, f), function (lefts) { return function (focus) { return function (rights) { return (0, exports.make)(lefts, focus, rights); }; }; }), f(ta.focus)), traverseF(ta.rights, f));
    };
};
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
var map = function (f) { return function (fa) { return map_(fa, f); }; };
exports.map = map;
/**
 * @category FunctorWithIndex
 * @since 0.1.18
 */
var mapWithIndex = function (f) { return function (fa) {
    return mapWithIndex_(fa, f);
}; };
exports.mapWithIndex = mapWithIndex;
/**
 * @category Apply
 * @since 0.1.18
 */
var ap = function (fa) { return function (fab) { return ap_(fab, fa); }; };
exports.ap = ap;
/**
 * @category Apply
 * @since 0.1.18
 */
var apFirst = function (fb) { return function (fa) {
    return (0, pipeable_1.pipe)(fa, (0, exports.map)(function (a) { return function (_) { return a; }; }), (0, exports.ap)(fb));
}; };
exports.apFirst = apFirst;
/**
 * @category Apply
 * @since 0.1.18
 */
var apSecond = function (fb) { return function (fa) {
    return (0, pipeable_1.pipe)(fa, (0, exports.map)(function () { return function (b) { return b; }; }), (0, exports.ap)(fb));
}; };
exports.apSecond = apSecond;
/**
 * @category Applicative
 * @since 0.1.6
 */
var of = function (focus) { return (0, exports.make)([], focus, []); };
exports.of = of;
/**
 * @category Extend
 * @since 0.1.18
 */
var extend = function (f) { return function (wa) { return extend_(wa, f); }; };
exports.extend = extend;
/**
 * @category Extend
 * @since 0.1.18
 */
exports.duplicate = (0, exports.extend)(function_1.identity);
/**
 * @category Foldable
 * @since 0.1.18
 */
var foldMap = function (M) { return function (f) { return function (fa) {
    return foldMap_(M)(fa, f);
}; }; };
exports.foldMap = foldMap;
/**
 * @category Foldable
 * @since 0.1.18
 */
var reduce = function (b, f) { return function (fa) { return reduce_(fa, b, f); }; };
exports.reduce = reduce;
/**
 * @category Foldable
 * @since 0.1.18
 */
var reduceRight = function (b, f) { return function (fa) {
    return reduceRight_(fa, b, f);
}; };
exports.reduceRight = reduceRight;
/**
 * @category Traversable
 * @since 0.1.18
 */
var sequence = function (F) {
    var sequenceF = A.array.sequence(F);
    return function (ta) {
        return F.ap(F.ap(F.map(sequenceF(ta.lefts), function (lefts) { return function (focus) { return function (rights) { return (0, exports.make)(lefts, focus, rights); }; }; }), ta.focus), sequenceF(ta.rights));
    };
};
exports.sequence = sequence;
/**
 * @category Comonad
 * @since 0.1.18
 */
var extract = function (fa) { return fa.focus; };
exports.extract = extract;
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.6
 */
exports.URI = 'Zipper';
/**
 * @category instances
 * @since 0.1.6
 */
var getShow = function (S) {
    var SA = A.getShow(S);
    return {
        show: function (fa) { return "Zipper(".concat(SA.show(fa.lefts), ", ").concat(S.show(fa.focus), ", ").concat(SA.show(fa.rights), ")"); }
    };
};
exports.getShow = getShow;
/**
 * @category instances
 * @since 0.1.6
 */
var getSemigroup = function (S) { return ({
    concat: function (x, y) { return (0, exports.make)(x.lefts.concat(y.lefts), S.concat(x.focus, y.focus), x.rights.concat(y.rights)); }
}); };
exports.getSemigroup = getSemigroup;
/**
 * @category instances
 * @since 0.1.6
 */
var getMonoid = function (M) { return (__assign(__assign({}, (0, exports.getSemigroup)(M)), { empty: (0, exports.make)([], M.empty, []) })); };
exports.getMonoid = getMonoid;
/**
 * @category instances
 * @since 0.1.18
 */
exports.Functor = {
    URI: exports.URI,
    map: map_
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.FunctorWithIndex = {
    URI: exports.URI,
    map: map_,
    mapWithIndex: mapWithIndex_
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Applicative = {
    URI: exports.URI,
    map: map_,
    ap: ap_,
    of: exports.of
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Apply = {
    URI: exports.URI,
    map: map_,
    ap: ap_
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Foldable = {
    URI: exports.URI,
    foldMap: foldMap_,
    reduce: reduce_,
    reduceRight: reduceRight_
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Traversable = {
    URI: exports.URI,
    map: map_,
    foldMap: foldMap_,
    reduce: reduce_,
    reduceRight: reduceRight_,
    traverse: traverse_,
    sequence: exports.sequence
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Comonad = {
    URI: exports.URI,
    map: map_,
    extend: extend_,
    extract: exports.extract
};
/**
 * @category instances
 * @since 0.1.6
 */
exports.zipper = {
    URI: exports.URI,
    map: map_,
    of: exports.of,
    ap: ap_,
    extend: extend_,
    extract: exports.extract,
    reduce: reduce_,
    reduceRight: reduceRight_,
    foldMap: foldMap_,
    traverse: traverse_,
    sequence: exports.sequence,
    mapWithIndex: mapWithIndex_
};
