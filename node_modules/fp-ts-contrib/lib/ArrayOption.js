"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.arrayOption = exports.Alternative = exports.Alt = exports.Monad = exports.Apply = exports.Applicative = exports.Functor = exports.URI = exports.zero = exports.alt = exports.flatten = exports.chainFirst = exports.chain = exports.chainOptionK = exports.of = exports.apSecond = exports.apFirst = exports.ap = exports.map = exports.getOrElse = exports.fold = exports.some = exports.none = exports.fromOptionK = exports.fromOption = exports.fromArray = void 0;
var Array_1 = require("fp-ts/lib/Array");
var function_1 = require("fp-ts/lib/function");
var OptionT_1 = require("fp-ts/lib/OptionT");
var pipeable_1 = require("fp-ts/lib/pipeable");
var T = (0, OptionT_1.getOptionM)(Array_1.array);
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @category constructors
 * @since 0.1.0
 */
exports.fromArray = T.fromM;
/**
 * @category constructors
 * @since 0.1.0
 */
exports.fromOption = Array_1.of;
/**
 * @category constructors
 * @since 0.1.10
 */
var fromOptionK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return (0, exports.fromOption)(f.apply(void 0, a));
}; };
exports.fromOptionK = fromOptionK;
/**
 * @category constructors
 * @since 0.1.0
 */
exports.none = T.none();
/**
 * @category constructors
 * @since 0.1.0
 */
exports.some = T.of;
// -------------------------------------------------------------------------------------
// destructors
// -------------------------------------------------------------------------------------
/**
 * @category destructors
 * @since 0.1.0
 */
var fold = function (onNone, onSome) { return function (as) { return T.fold(as, onNone, onSome); }; };
exports.fold = fold;
/**
 * @category destructors
 * @since 0.1.0
 */
var getOrElse = function (onNone) { return function (as) {
    return T.getOrElse(as, onNone);
}; };
exports.getOrElse = getOrElse;
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
var map = function (f) { return function (fa) { return T.map(fa, f); }; };
exports.map = map;
/**
 * @category Apply
 * @since 0.1.18
 */
var ap = function (fa) { return function (fab) {
    return T.ap(fab, fa);
}; };
exports.ap = ap;
/**
 * @category Apply
 * @since 0.1.18
 */
var apFirst = function (fb) { return function (fa) {
    return (0, pipeable_1.pipe)(fa, (0, exports.map)(function (a) { return function (_) { return a; }; }), (0, exports.ap)(fb));
}; };
exports.apFirst = apFirst;
/**
 * @category Apply
 * @since 0.1.18
 */
var apSecond = function (fb) { return function (fa) {
    return (0, pipeable_1.pipe)(fa, (0, exports.map)(function () { return function (b) { return b; }; }), (0, exports.ap)(fb));
}; };
exports.apSecond = apSecond;
/**
 * @category Applicative
 * @since 0.1.18
 */
exports.of = T.of;
/**
 * @category Monad
 * @since 0.1.10
 */
var chainOptionK = function (f) {
    return (0, exports.chain)((0, exports.fromOptionK)(f));
};
exports.chainOptionK = chainOptionK;
/**
 * @category Monad
 * @since 0.1.18
 */
var chain = function (f) { return function (fa) {
    return T.chain(fa, f);
}; };
exports.chain = chain;
/**
 * @category Monad
 * @since 0.1.18
 */
var chainFirst = function (f) { return function (ma) {
    return T.chain(ma, function (a) { return T.map(f(a), function () { return a; }); });
}; };
exports.chainFirst = chainFirst;
/**
 * @category Monad
 * @since 0.1.18
 */
var flatten = function (mma) { return T.chain(mma, function_1.identity); };
exports.flatten = flatten;
/**
 * @category Alternative
 * @since 0.1.18
 */
var alt = function (that) { return function (fa) {
    return T.alt(fa, that);
}; };
exports.alt = alt;
/**
 * @category Alternative
 * @since 0.1.18
 */
var zero = function () { return Array_1.empty; };
exports.zero = zero;
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.0
 */
exports.URI = 'ArrayOption';
/**
 * @category instances
 * @since 0.1.18
 */
exports.Functor = {
    URI: exports.URI,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Applicative = {
    URI: exports.URI,
    map: T.map,
    ap: T.ap,
    of: exports.of
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Apply = {
    URI: exports.URI,
    ap: T.ap,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Monad = {
    URI: exports.URI,
    ap: T.ap,
    chain: T.chain,
    map: T.map,
    of: T.of
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Alt = {
    URI: exports.URI,
    alt: T.alt,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Alternative = {
    URI: exports.URI,
    alt: T.alt,
    ap: T.ap,
    map: T.map,
    of: T.of,
    zero: exports.zero
};
/**
 * @category instances
 * @since 0.1.0
 */
exports.arrayOption = {
    URI: exports.URI,
    map: T.map,
    of: exports.some,
    ap: T.ap,
    chain: T.chain,
    alt: T.alt
};
