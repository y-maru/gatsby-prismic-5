"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.taskOption = exports.Filterable = exports.Compactable = exports.Alternative = exports.Monad = exports.Apply = exports.Applicative = exports.Functor = exports.partitionMap = exports.partition = exports.filterMap = exports.filter = exports.separate = exports.compact = exports.zero = exports.alt = exports.flatten = exports.chainOptionK = exports.chainOption = exports.chainTask = exports.chainFirst = exports.chain = exports.of = exports.apSecond = exports.apFirst = exports.ap = exports.map = exports.mapNullable = exports.toNullable = exports.toUndefined = exports.getOrElse = exports.fold = exports.tryCatch = exports.fromTaskEither = exports.fromNullable = exports.fromTask = exports.fromOptionK = exports.fromOption = exports.some = exports.none = void 0;
var Filterable_1 = require("fp-ts/lib/Filterable");
var function_1 = require("fp-ts/lib/function");
var O = __importStar(require("fp-ts/lib/Option"));
var OptionT_1 = require("fp-ts/lib/OptionT");
var pipeable_1 = require("fp-ts/lib/pipeable");
var Task_1 = require("fp-ts/lib/Task");
var F = (0, Filterable_1.getFilterableComposition)(Task_1.task, O.option);
var T = (0, OptionT_1.getOptionM)(Task_1.task);
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @category constructors
 * @since 0.1.0
 */
exports.none = T.none();
/**
 * @category constructors
 * @since 0.1.0
 */
exports.some = T.of;
/**
 * @category constructors
 * @since 0.1.0
 */
exports.fromOption = Task_1.of;
/**
 * @category constructors
 * @since 0.1.10
 */
var fromOptionK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return (0, exports.fromOption)(f.apply(void 0, a));
}; };
exports.fromOptionK = fromOptionK;
/**
 * @category constructors
 * @since 0.1.0
 */
exports.fromTask = T.fromM;
/**
 * @category constructors
 * @since 0.1.4
 */
var fromNullable = function (a) { return (0, exports.fromOption)(O.fromNullable(a)); };
exports.fromNullable = fromNullable;
/**
 * @category constructors
 * @since 0.1.4
 */
var fromTaskEither = function (ma) { return Task_1.task.map(ma, O.fromEither); };
exports.fromTaskEither = fromTaskEither;
/**
 * @category constructors
 * @since 0.1.5
 */
var tryCatch = function (f) { return function () {
    return f().then(function (a) { return O.some(a); }, function () { return O.none; });
}; };
exports.tryCatch = tryCatch;
// -------------------------------------------------------------------------------------
// destructors
// -------------------------------------------------------------------------------------
/**
 * @category destructors
 * @since 0.1.0
 */
var fold = function (onNone, onSome) { return function (as) { return T.fold(as, onNone, onSome); }; };
exports.fold = fold;
/**
 * @category destructors
 * @since 0.1.0
 */
var getOrElse = function (onNone) { return function (as) {
    return T.getOrElse(as, onNone);
}; };
exports.getOrElse = getOrElse;
/**
 * @category destructors
 * @since 0.1.4
 */
var toUndefined = function (ma) { return Task_1.task.map(ma, O.toUndefined); };
exports.toUndefined = toUndefined;
/**
 * @category destructors
 * @since 0.1.4
 */
var toNullable = function (ma) { return Task_1.task.map(ma, O.toNullable); };
exports.toNullable = toNullable;
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @category combinators
 * @since 0.1.5
 */
var mapNullable = function (f) {
    return (0, Task_1.map)(O.mapNullable(f));
};
exports.mapNullable = mapNullable;
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
var map = function (f) { return function (fa) { return T.map(fa, f); }; };
exports.map = map;
/**
 * @category Apply
 * @since 0.1.18
 */
var ap = function (fa) { return function (fab) {
    return T.ap(fab, fa);
}; };
exports.ap = ap;
/**
 * @category Apply
 * @since 0.1.18
 */
var apFirst = function (fb) { return function (fa) {
    return (0, pipeable_1.pipe)(fa, (0, exports.map)(function (a) { return function (_) { return a; }; }), (0, exports.ap)(fb));
}; };
exports.apFirst = apFirst;
/**
 * @category Apply
 * @since 0.1.18
 */
var apSecond = function (fb) { return function (fa) {
    return (0, pipeable_1.pipe)(fa, (0, exports.map)(function () { return function (b) { return b; }; }), (0, exports.ap)(fb));
}; };
exports.apSecond = apSecond;
/**
 * @category Applicative
 * @since 0.1.18
 */
exports.of = exports.some;
/**
 * @category Monad
 * @since 0.1.18
 */
var chain = function (f) { return function (ma) {
    return T.chain(ma, f);
}; };
exports.chain = chain;
/**
 * @category Monad
 * @since 0.1.18
 */
var chainFirst = function (f) { return function (ma) {
    return T.chain(ma, function (a) { return T.map(f(a), function () { return a; }); });
}; };
exports.chainFirst = chainFirst;
/**
 * @category Monad
 * @since 0.1.4
 */
var chainTask = function (f) { return function (ma) {
    return T.chain(ma, function (a) { return (0, exports.fromTask)(f(a)); });
}; };
exports.chainTask = chainTask;
/**
 * @category Monad
 * @since 0.1.4
 */
var chainOption = function (f) {
    return (0, Task_1.map)(O.chain(f));
};
exports.chainOption = chainOption;
/**
 * @category Monad
 * @since 0.1.10
 */
var chainOptionK = function (f) {
    return (0, exports.chain)((0, exports.fromOptionK)(f));
};
exports.chainOptionK = chainOptionK;
/**
 * @category Monad
 * @since 0.1.18
 */
var flatten = function (mma) { return T.chain(mma, function_1.identity); };
exports.flatten = flatten;
/**
 * @category Alternative
 * @since 0.1.18
 */
var alt = function (that) { return function (fa) {
    return T.alt(fa, that);
}; };
exports.alt = alt;
/**
 * @category Alternative
 * @since 0.1.18
 */
exports.zero = T.none;
/**
 * @category Compactable
 * @since 0.1.18
 */
exports.compact = F.compact;
/**
 * @category Compactable
 * @since 0.1.18
 */
exports.separate = F.separate;
/**
 * @category Filterable
 * @since 0.1.18
 */
var filter = function (predicate) { return function (fa) { return F.filter(fa, predicate); }; };
exports.filter = filter;
/**
 * @category Filterable
 * @since 0.1.18
 */
var filterMap = function (f) { return function (fa) {
    return F.filterMap(fa, f);
}; };
exports.filterMap = filterMap;
/**
 * @category Filterable
 * @since 0.1.18
 */
var partition = function (predicate) { return function (fa) {
    return F.partition(fa, predicate);
}; };
exports.partition = partition;
/**
 * @category Filterable
 * @since 0.1.18
 */
var partitionMap = function (f) { return function (fa) { return F.partitionMap(fa, f); }; };
exports.partitionMap = partitionMap;
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.0
 */
var URI = 'TaskOption';
/**
 * @category instances
 * @since 0.1.18
 */
exports.Functor = {
    URI: URI,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Applicative = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    of: exports.of
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Apply = {
    URI: URI,
    map: T.map,
    ap: T.ap
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Monad = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    chain: T.chain,
    of: exports.of
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Alternative = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    alt: T.alt,
    of: exports.of,
    zero: exports.zero
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Compactable = {
    URI: URI,
    compact: exports.compact,
    separate: exports.separate
};
/**
 * @category instances
 * @since 0.1.18
 */
exports.Filterable = {
    URI: URI,
    map: T.map,
    compact: F.compact,
    filter: F.filter,
    filterMap: F.filterMap,
    separate: F.separate,
    partition: F.partition,
    partitionMap: F.partitionMap
};
/**
 * @category instances
 * @since 0.1.0
 */
exports.taskOption = __assign({ URI: URI, of: exports.some, ap: T.ap, chain: T.chain, alt: T.alt, zero: T.none }, (0, Filterable_1.getFilterableComposition)(Task_1.task, O.option));
