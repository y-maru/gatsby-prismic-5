import { identity } from 'fp-ts/es6/function';
import * as I from 'fp-ts/es6/IO';
import { pipe } from 'fp-ts/es6/pipeable';
import { getReaderM } from 'fp-ts/es6/ReaderT';
var T = getReaderM(I.io);
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @category constructors
 * @since 0.1.0
 */
export var fromIO = T.fromM;
/**
 * @category constructors
 * @since 0.1.10
 */
export var fromIOK = function (f) { return function () {
    var a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        a[_i] = arguments[_i];
    }
    return fromIO(f.apply(void 0, a));
}; };
/**
 * @category constructors
 * @since 0.1.0
 */
export var fromReader = T.fromReader;
/**
 * @category constructors
 * @since 0.1.0
 */
export var ask = T.ask;
/**
 * @category constructors
 * @since 0.1.0
 */
export var asks = T.asks;
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @category combinators
 * @since 0.1.0
 */
export var local = function (f) { return function (ma) { return T.local(ma, f); }; };
/**
 * Less strict version of [`asksReaderIO`](#asksreaderio).
 *
 * @category combinators
 * @since 0.1.27
 */
// TODO: use R.asksReaderW when fp-ts version >= 2.11.0
export var asksReaderIOW = function (f) { return function (r) { return f(r)(r); }; };
/**
 * Effectfully accesses the environment.
 *
 * @category combinators
 * @since 0.1.27
 */
export var asksReaderIO = asksReaderIOW;
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 0.1.18
 */
export var map = function (f) { return function (fa) { return T.map(fa, f); }; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var ap = function (fa) { return function (fab) {
    return T.ap(fab, fa);
}; };
/**
 * Less strict version of [`ap`](#ap).
 *
 * @category Apply
 * @since 0.1.28
 */
export var apW = ap;
/**
 * @category Apply
 * @since 0.1.18
 */
export var apFirst = function (fb) { return function (fa) {
    return pipe(fa, map(function (a) { return function (_) { return a; }; }), ap(fb));
}; };
/**
 * @category Apply
 * @since 0.1.18
 */
export var apSecond = function (fb) { return function (fa) {
    return pipe(fa, map(function () { return function (b) { return b; }; }), ap(fb));
}; };
/**
 * @category Applicative
 * @since 0.1.18
 */
export var of = T.of;
/**
 * @category Monad
 * @since 0.1.18
 */
export var chain = function (f) { return function (ma) {
    return T.chain(ma, f);
}; };
/**
 * Less strict version of  [`chain`](#chain).
 *
 * @category Monad
 * @since 0.1.28
 */
export var chainW = chain;
/**
 * @category Monad
 * @since 0.1.18
 */
export var chainFirst = function (f) { return function (ma) { return T.chain(ma, function (a) { return T.map(f(a), function () { return a; }); }); }; };
/**
 * Less strict version of [`chainFirst`](#chainfirst).
 *
 * Derivable from `Chain`.
 *
 * @category combinators
 * @since 0.1.28
 */
export var chainFirstW = chainFirst;
/**
 * @category Monad
 * @since 0.1.10
 */
export var chainIOK = function (f) {
    return chain(fromIOK(f));
};
/**
 * Less strict version of [`flatten`](#flatten).
 *
 * @category Monad
 * @since 0.1.28
 */
export var flattenW = chainW(identity);
/**
 * @category Monad
 * @since 0.1.18
 */
export var flatten = flattenW;
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 0.1.0
 */
export var URI = 'ReaderIO';
/**
 * @category instances
 * @since 0.1.18
 */
export var Functor = {
    URI: URI,
    map: T.map
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Applicative = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    of: of
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Apply = {
    URI: URI,
    map: T.map,
    ap: T.ap
};
/**
 * @category instances
 * @since 0.1.18
 */
export var Monad = {
    URI: URI,
    map: T.map,
    ap: T.ap,
    chain: T.chain,
    of: of
};
/**
 * @category instances
 * @since 0.1.0
 */
export var readerIO = {
    URI: URI,
    map: T.map,
    of: T.of,
    ap: T.ap,
    chain: T.chain
};
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------
/**
 * @since 0.1.0
 */
export var run = function (ma, r) { return ma(r)(); };
