"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setToCache = exports.getFromCache = exports.withCache = void 0;
var pipeable_1 = require("fp-ts/pipeable");
var TE = __importStar(require("fp-ts/TaskEither"));
var log_1 = require("./log");
var log = (0, log_1.createLogger)('cache');
var withCache = function (key, cache, f) {
    return (0, pipeable_1.pipe)((0, log_1.trace)("Trying to retrieve ".concat(key, " from cache"), log)(''), function () { return (0, exports.getFromCache)(cache, key); }, TE.map((0, log_1.trace)("Successfully retrieved ".concat(key, " from cache with value"), log)), 
    // If no cache hit, run function and store result in cache
    TE.orElse(function () {
        return (0, pipeable_1.pipe)(f(), TE.map((0, log_1.trace)("Couldn't retrieve ".concat(key, " from cache, replacing with value"), log)), TE.chainW((0, exports.setToCache)(key, cache)));
    }), TE.mapLeft((0, log_1.trace)('Error in withCache', log)));
};
exports.withCache = withCache;
var getFromCache = function (cache, key) {
    return TE.tryCatch(function () {
        return cache.get(key).then(function (v) {
            (0, log_1.trace)("Retrieved value from cache for ".concat(key), log)(v);
            if (v == null) {
                log("Key ".concat(key, " doesn't exist in the cache"));
                throw new Error("Key ".concat(key, " doesn't exist in the cache"));
            }
            return v;
        });
    }, function () { return new Error("Failed to get \"".concat(key, "\" in cache.")); });
};
exports.getFromCache = getFromCache;
var setToCache = function (key, cache) { return function (value) {
    return (0, pipeable_1.pipe)(TE.tryCatch(function () {
        (0, log_1.trace)("Setting \"".concat(key, "\" in cache to"), log)(value);
        return cache.set(key, value).then(function () { return value; });
    }, function () { return new Error("Failed to set \"".concat(key, "\" in cache to value: ").concat(value)); }), TE.map((0, log_1.trace)("Cached value", log)), TE.mapLeft((0, log_1.trace)("Failed to set \"".concat(key, "\" in cache to"), log)));
}; };
exports.setToCache = setToCache;
//# sourceMappingURL=cache.js.map